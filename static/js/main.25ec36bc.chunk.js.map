{"version":3,"sources":["common/Preloader/Preloader.module.scss","common/Post/Post.tsx","api/api.ts","App/app-reducer.ts","assets/img/search.png","common/Find/Find.tsx","assets/img/loader.gif","common/Preloader/Preloader.tsx","App.tsx","reportWebVitals.ts","store/store.ts","index.tsx","common/Post/Post.module.scss","App.module.scss","common/Find/Find.module.scss"],"names":["module","exports","Post","props","className","s","card","title","post","body","author","instance","axios","create","baseURL","placeholderAPI","get","SET_USERS_DATA","SET_POSTS_DATA","SET_IS_FETCH","initialState","users","posts","isFetch","error","setUsersDataAC","data","type","payload","setIsFetchAC","Find","findWrapper","findBtn","disabled","src","search","alt","findInput","value","findAuthor","onChange","e","currentTarget","autoComplete","name","id","placeholder","Preloader","overlay","wrapper","preloader","App","postsData","useSelector","state","app","authorsData","isFetchStatus","dispatch","useDispatch","useState","filterValue","setFilterValue","useEffect","a","findAuthorName","find","filteredData","map","p","userId","filter","el","toLowerCase","includes","container","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.25ec36bc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Preloader_wrapper__1RhJS\",\"overlay\":\"Preloader_overlay__z-1yl\"};","import React from \"react\";\nimport s from \"./Post.module.scss\"\ntype PostDataType = {\n    userId: number\n    id: number\n    title: string\n    body: string\n    author: string\n}\n\n\nexport const Post = (props: PostDataType) => {\n    return (\n        <div className={s.card}>\n            <h3 className={s.title}>{props.title}</h3>\n            <p className={s.post}>{props.body}</p>\n            <span className={s.author}>{props.author}</span>\n        </div>\n    )\n}","import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'http://jsonplaceholder.typicode.com/',\r\n\r\n})\r\n\r\n// api\r\nexport const placeholderAPI = {\r\n    getPosts() {\r\n        return instance.get('posts');\r\n    },\r\n    getAuthors() {\r\n        return instance.get('users');\r\n    }\r\n}\r\n\r\n\r\nexport  type ResponsePostsDataType = {\r\n    userId: number,\r\n    id: number,\r\n    title: string,\r\n    body: string\r\n}\r\nexport  type ResponseAuthorsDataType = {\r\n    \"id\": number,\r\n    \"name\": string\r\n    \"username\": string\r\n    \"email\": string\r\n    \"address\": {\r\n        \"street\": string\r\n        \"suite\": string\r\n        \"city\":string\r\n        \"zipcode\": string\r\n        \"geo\": {\r\n            \"lat\": string\r\n            \"lng\": string\r\n        }\r\n    },\r\n    \"phone\": string\r\n    \"website\": string\r\n    \"company\": {\r\n        \"name\":string\r\n        \"catchPhrase\":string\r\n        \"bs\": string\r\n    }\r\n}\r\n","import {placeholderAPI, ResponseAuthorsDataType, ResponsePostsDataType} from \"../api/api\";\nimport {Dispatch} from \"redux\";\n\nconst SET_USERS_DATA = \"SET_USERS_DATA\";\nconst SET_POSTS_DATA = \"SET_POSTS_DATA\";\nconst SET_IS_FETCH = \"SET_IS_FETCH\";\nconst SET_ERROR = \"SET_ERROR\";\n\nexport let initialState = {\n    users: [] as Array<ResponseAuthorsDataType>,\n    posts: [] as Array<ResponsePostsDataType>,\n    isFetch: null as boolean | null,\n    error: null as string | null\n}\n\ntype initialStateType = typeof initialState\n\nexport const appReducer = (state: initialStateType = initialState, action: ActionsTypes): initialStateType => {\n    switch (action.type) {\n        case SET_USERS_DATA:\n            return {\n                ...state, users: action.payload\n            }\n        case SET_POSTS_DATA:\n            return {\n                ...state, posts: action.payload\n            }\n        case SET_IS_FETCH:\n            return {\n                ...state, isFetch: action.isFetch\n            }\n        default:\n            return state\n    }\n}\n\n//actions\nexport const setUsersDataAC = (data: ResponseAuthorsDataType[]) => ({type: SET_USERS_DATA, payload: data} as const);\nexport const setPostsDataAC = (data: ResponsePostsDataType[]) => ({type: SET_POSTS_DATA, payload: data} as const);\nexport const setIsFetchAC = (isFetch: boolean | null) => ({type: SET_IS_FETCH, isFetch} as const);\nexport const setError = (error: string) => ({type: SET_ERROR, error} as const);\n\n//thunks\nexport const setDataTC = () => async (dispatch: Dispatch<ActionsTypes>) => {\n    dispatch(setIsFetchAC(false));\n    try {\n        let posts = await placeholderAPI.getPosts();\n        let users = await placeholderAPI.getAuthors();\n        dispatch(setPostsDataAC(posts.data))\n        dispatch(setUsersDataAC(users.data))\n        dispatch(setIsFetchAC(true))\n    } catch (error) {\n        dispatch(setError(error))\n    }\n}\n\n//types\ntype ActionsTypes =\n    | ReturnType<typeof setUsersDataAC>\n    | ReturnType<typeof setPostsDataAC>\n    | ReturnType<typeof setIsFetchAC>\n    | ReturnType<typeof setError>\n","export default __webpack_public_path__ + \"static/media/search.e65d7764.png\";","import React from \"react\";\nimport s from \"./Find.module.scss\"\nimport search from \"../../assets/img/search.png\"\n\nexport const Find = (props: FindType) => {\n    return (\n        <div className={s.findWrapper}>\n            <button className={s.findBtn} disabled={true}>\n                <img src={search} alt=\"search\"/>\n            </button>\n            <input className={s.findInput}\n                   value={props.findAuthor}\n                   onChange={(e) => {\n                       props.onChange(e.currentTarget.value)\n                   }}\n                   autoComplete={\"off\"}\n                   name={\"search\"}\n                   type=\"text\" id={\"search\"}\n                   placeholder={\"Filter by author...\"}\n            />\n        </div>\n    );\n}\n\ntype FindType = {\n    findAuthor: string,\n    onChange: (value: string) => void\n}\n","export default __webpack_public_path__ + \"static/media/loader.149a7823.gif\";","import React from \"react\";\nimport s from \"./Preloader.module.scss\"\nimport preloader from \"../../assets/img/loader.gif\"\n\nexport const Preloader = () => {\n    return(\n        <div className={s.overlay}>\n        <div className={s.wrapper}>\n            <img src={preloader} alt=\"loading...\"/>\n        </div>\n        </div>\n    );\n}","import React, {useEffect, useState} from 'react';\nimport s from './App.module.scss';\nimport {Post} from \"./common/Post/Post\";\nimport {ResponseAuthorsDataType, ResponsePostsDataType} from \"./api/api\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {setDataTC} from \"./App/app-reducer\";\nimport {RootStateRedux} from \"./store/store\";\nimport {Find} from './common/Find/Find';\nimport {Preloader} from \"./common/Preloader/Preloader\";\n\nfunction App() {\n    const postsData = useSelector<RootStateRedux, ResponsePostsDataType[]>(state => state.app.posts);\n    const authorsData = useSelector<RootStateRedux, ResponseAuthorsDataType[]>(state => state.app.users);\n    const isFetchStatus = useSelector<RootStateRedux, boolean | null>(state => state.app.isFetch);\n    const error = useSelector<RootStateRedux, string | null>(state => state.app.error);\n\n    const dispatch = useDispatch();\n    const [filterValue, setFilterValue] = useState(\"\");\n\n    useEffect(() => {\n        dispatch(setDataTC());\n    }, [dispatch])\n\n    const findAuthorName = (id: number) => {\n        let author = authorsData.find(a => a.id === id);\n        if (author) {\n            return author.name\n        } else {\n            return \"unknown\"\n        }\n    }\n\n    let posts = postsData.map(p => {\n        return {...p, author: findAuthorName(p.userId)};\n    })\n\n    const getFilteredData = () => {\n        return posts.filter(el => el.author.toLowerCase().includes(filterValue.toLowerCase()));\n    }\n\n    const filteredData = getFilteredData();\n    const onChangeFindAuthor = (value: string) => {\n        setFilterValue(value);\n    }\n\n    if (!isFetchStatus) return <Preloader/>\n\n    if (error) return <h3>{error}</h3>\n\n    return (\n        <div className={s.app}>\n            <div className={s.container}>\n                <Find onChange={onChangeFindAuthor} findAuthor={filterValue}/>\n                <div className={s.posts}>\n                    {\n                        filteredData.map(p => <Post key={p.id}\n                                                    userId={p.userId}\n                                                    id={p.id}\n                                                    title={p.title}\n                                                    body={p.body}\n                                                    author={p.author}\n                        />)\n                    }\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\nimport thunkMiddleware from \"redux-thunk\";\nimport {appReducer} from \"../App/app-reducer\";\n\nlet reducers = combineReducers({\n    app: appReducer,\n});\n\nexport type RootStateRedux = ReturnType<typeof reducers>\n\nconst store = createStore(reducers, applyMiddleware(thunkMiddleware));\n\n\n// (<any>window).store = store;\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport store from \"./store/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Post_card__3ngog\",\"title\":\"Post_title__10_eX\",\"post\":\"Post_post__3myAU\",\"author\":\"Post_author__36IxH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__2TJWI\",\"container\":\"App_container__2o1Im\",\"posts\":\"App_posts__sGhBT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"findWrapper\":\"Find_findWrapper__2Vpwq\",\"findBtn\":\"Find_findBtn__1AS8m\",\"findInput\":\"Find_findInput__QHnTA\"};"],"sourceRoot":""}